[{"E:\\Web-Development\\TEST TASK\\ITOP Agency\\timer-rx\\stopwatch\\src\\index.js":"1","E:\\Web-Development\\TEST TASK\\ITOP Agency\\timer-rx\\stopwatch\\src\\Stopwatch\\Stopwatch.js":"2"},{"size":31,"mtime":1611511290720,"results":"3","hashOfConfig":"4"},{"size":1825,"mtime":1611521025144,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"m9k3yw",{"filePath":"9","messages":"10","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"E:\\Web-Development\\TEST TASK\\ITOP Agency\\timer-rx\\stopwatch\\src\\index.js",[],["12","13"],"E:\\Web-Development\\TEST TASK\\ITOP Agency\\timer-rx\\stopwatch\\src\\Stopwatch\\Stopwatch.js",["14","15","16","17"],"import {Observable} from 'rxjs'\r\nimport Rx from 'rxjs/Rx'\r\nimport { map, buffer, debounceTime, filter } from 'rxjs/operators';\r\nimport './Stopwatch.css'\r\nimport { mapTo } from 'rxjs-compat/operator/mapTo';\r\nimport { takeUntil } from 'rxjs-compat/operator/takeUntil';\r\n\r\n\r\nconst startButton = document.querySelector('#start')\r\nconst stopButton = document.querySelector('#wait')\r\nconst resetButton = document.querySelector('#reset')\r\n\r\nconst start$ = Observable.fromEvent(startButton, 'click')\r\nconst wait$ = Observable.fromEvent(stopButton, 'click')\r\nconst reset$ = Observable.fromEvent(resetButton, 'click')\r\n\r\nconst seconds = document.querySelector('#seconds')\r\nconst minutes = document.querySelector('#minutes')\r\nconst hours = document.querySelector('#hours')\r\n\r\n\r\nconst toTime = (time) => ({\r\n  seconds: Math.floor((time / 1) % 60),\r\n  minutes: Math.floor((time / 60) % 60),\r\n  hours: Math.floor(time / 3600)\r\n}) \r\n\r\nconst zero = (number) => number <= 9 ? ('0' + number) : number.toString()\r\n\r\nconst render = (time) => {\r\n  seconds.innerHTML = zero(time.seconds)\r\n  minutes.innerHTML = zero(time.minutes)\r\n  hours.innerHTML = zero(time.hours)\r\n}\r\n\r\nconst interval$ = Observable.interval(1000)\r\n\r\n\r\nconst buff$ = wait$.pipe(\r\n  debounceTime(250),\r\n)\r\n\r\nconst click$ = wait$.pipe(\r\n  buffer(buff$),\r\n  map(list => {\r\n    return list.length;\r\n  }),\r\n  filter(x => x === 2),\r\n)\r\n\r\nclick$.subscribe(() => {\r\n  return true\r\n})\r\n\r\nconst pauseble$ = interval$.takeUntil(click$)\r\n\r\nconst init = 0\r\nconst inc = acc => acc + 1 \r\nconst reset = acc => init\r\n\r\nconst incOrReset$ = Observable.merge(\r\n  pauseble$.mapTo(inc),\r\n  reset$.mapTo(reset)\r\n)\r\n\r\n\r\nlet app$ = start$\r\n  .switchMapTo(incOrReset$)\r\n  .startWith(init)\r\n  .scan((acc, currFunc) => currFunc(acc))\r\n  .map(toTime)\r\n  .subscribe(\r\n    (val) => render(val)\r\n    )\r\n\r\n\r\n\r\n",{"ruleId":"18","replacedBy":"19"},{"ruleId":"20","replacedBy":"21"},{"ruleId":"22","severity":1,"message":"23","line":2,"column":8,"nodeType":"24","messageId":"25","endLine":2,"endColumn":10},{"ruleId":"22","severity":1,"message":"26","line":5,"column":10,"nodeType":"24","messageId":"25","endLine":5,"endColumn":15},{"ruleId":"22","severity":1,"message":"27","line":6,"column":10,"nodeType":"24","messageId":"25","endLine":6,"endColumn":19},{"ruleId":"22","severity":1,"message":"28","line":67,"column":5,"nodeType":"24","messageId":"25","endLine":67,"endColumn":9},"no-native-reassign",["29"],"no-negated-in-lhs",["30"],"no-unused-vars","'Rx' is defined but never used.","Identifier","unusedVar","'mapTo' is defined but never used.","'takeUntil' is defined but never used.","'app$' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]